#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding 
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Cgenarris Documentation
\end_layout

\begin_layout Author
Marom group
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Itemize
Support for special positions.
\end_layout

\begin_layout Itemize
Parallelized using OpenMP.
\end_layout

\begin_layout Itemize
Fast and efficient structure checking.
\end_layout

\begin_layout Itemize
Can generate in all possible Z (or NMPC) with Z' <= 1.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Cgenarris
\end_layout

\begin_layout Subsubsection*
Requirements
\end_layout

\begin_layout Standard
Any C compiler which supports ANSI C99 / GNU99 standard.
\end_layout

\begin_layout Subsubsection*
Using Makefile
\end_layout

\begin_layout Enumerate
Uncompress the tar file.
\end_layout

\begin_layout Enumerate
Execute 'make cgenarris'.
\end_layout

\begin_layout Enumerate
This will create cgenarris.x which is the desired executable.
\end_layout

\begin_layout Standard
NOTE:
\end_layout

\begin_layout Enumerate
You may change the C compiler using the environment variable CC.
 You may also uncomment the first line of the makefile and set the compiler.
\end_layout

\begin_layout Enumerate
Remove object files using 'make clean'
\end_layout

\begin_layout Subsection
Pygenarris
\end_layout

\begin_layout Subsubsection*
Requirements
\end_layout

\begin_layout Enumerate
Any C compiler which supports ANSI C99 / GNU99 standard.
\end_layout

\begin_layout Enumerate
SWIG (Simplified Wrapper code and Interface Generator).
\end_layout

\begin_layout Enumerate
Numpy
\end_layout

\begin_layout Enumerate
Distutils for installation through setup.py
\end_layout

\begin_layout Subsubsection*
Method 1: Using Makefile
\end_layout

\begin_layout Enumerate
Uncompress the tar file.
\end_layout

\begin_layout Enumerate
Paste the location of Python.h headerfile in the Makefile.
 (for Anaconda v3.7 it should be ' anaconda/include/python3.7m/ ')
\end_layout

\begin_layout Enumerate
Execute 'make pygenarris'.
\end_layout

\begin_layout Enumerate
This will create pygenarris.so library from which you can import pygenarris.
\end_layout

\begin_layout Subsubsection*
Method 2: Using Distutils
\end_layout

\begin_layout Enumerate
Uncompress the tar file.
\end_layout

\begin_layout Enumerate
Execute ' python setup.py build_ext --inplace'.
\end_layout

\begin_layout Enumerate
This will create pygenarris.so library from which you can import pygenarris.
\end_layout

\begin_layout Standard
NOTE
\end_layout

\begin_layout Enumerate
You may change the C compiler using the environment variable CC.
\end_layout

\begin_layout Enumerate
pygenarris can be configured with both python2 and python3.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Cgenarris
\end_layout

\begin_layout Standard
Cgenarris is the structure generator written in pure C.
 It can be compiled into a binary and can run without installing the full
 genarris python package.
 If you are interested in only random crystal structures, you can compile
 and run Cgenarris.
 It is parallelised using OpenMP and therefore can run only in one node.
 (An MPI version is under development).
 The settings for generation are read from control.in file and molecule geometry
 is read from geometry.in file found in the working directory.
 The output is printed in file named geometry.out file.
 
\end_layout

\begin_layout Standard
First, the generator first identifies space groups that are compatible with
 molecular symmetry and given number of molecules in the unit cell.
 Structures are generated sequentially from lowest space group to the highest.
 Cell volumes are sampled from a normal distribution.
 The attempted structures are checked for closeness of molecules.
 If an atom of a molecule is too close to its own periodic image or another
 atom of a different molecule in a cell, the structure is discarded.
 The closeness checks are controlled by the specific radius proportion (sr).
 If the generation of a space group fails after max_attempts times, the
 generator moves to the next higher space group.
 The generated structures are printed to the file in FHI-aims geometry.in.
 format.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Standard
Geometry of the molecule is read from the file 
\emph on
geometry.in 
\emph default
from the working directory.
\end_layout

\begin_layout Enumerate

\emph on
num_structures 
\emph default
is the number of structures from each space group.
 Type: integer
\end_layout

\begin_layout Enumerate

\emph on
Z 
\emph default
number of molecules in the conventional cell.
 Type: integer
\end_layout

\begin_layout Enumerate

\emph on
volume_mean 
\emph default
is the mean of the normal distribution from which volume is sampled.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
volume_std 
\emph default
is the standard deviation of the volume distribution.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
sr 
\emph default
is specific radius proportion.
 See Genarris paper for definition.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
tol
\emph default
 is the tolerance for special position generation and space group detection.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
max_attempts 
\emph default
is the maximum number of attempts before moving to the next space group.
 Type: integer
\end_layout

\begin_layout Enumerate
The number of threads can be set by using the environment variable 
\emph on
OMP_NUM_THREADS.
\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Enumerate
A file named 
\emph on
geometry.out 
\emph default
with all the generated structures in FHI-aims geometry format.
\end_layout

\begin_layout Section
Pygenarris
\end_layout

\begin_layout Standard
Pygenarris is a python API for C structure generator and associated functions.
\end_layout

\begin_layout Subsection
Generate a pool of random molecular crystals
\end_layout

\begin_layout Standard

\emph on
generate_molecular_crystals(filename, num_structures, Z, volume_mean, volume_std
, sr, tol, max_attempts)
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Generate random molecular crystals by space groups.
 First, the generator first identifies space groups that are compatible
 with molecular symmetry and given number of molecules in the unit cell.
 Structures are generated sequentially from lowest space group to the highest.
 Cell volumes are sampled from a normal distribution.
 The attempted structures are checked for closeness of molecules.
 If an atom of a molecule is too close to its own periodic image or another
 atom of a different molecule in a cell, the structure is discarded.
 The closeness checks are controlled by the specific radius proportion (sr).
 If the generation of a space group fails after max_attempts times, the
 generator moves to the next higher space group.
 The generated structures are printed to the file in FHI-aims geometry.in.
 format.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Enumerate
Geometry of the molecule is read from the file 
\emph on
geometry.in 
\emph default
from the working directory.
\end_layout

\begin_layout Enumerate

\emph on
filename 
\emph default
is the name of the file to which generated structures are printed.
 Type: string
\end_layout

\begin_layout Enumerate

\emph on
num_structures 
\emph default
is the number of structures from each space group.
 Type: integer
\end_layout

\begin_layout Enumerate

\emph on
Z 
\emph default
number of molecules in the conventional cell.
 Type: integer
\end_layout

\begin_layout Enumerate

\emph on
volume_mean 
\emph default
is the mean of the normal distribution from which volume is sampled.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
volume_std 
\emph default
is the standard deviation of the volume distribution.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
sr 
\emph default
is specific radius proportion.
 See Genarris paper for definition.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
tol
\emph default
 is the tolerance for special position generation and space group detection.
 Type: float
\end_layout

\begin_layout Enumerate

\emph on
max_attempts 
\emph default
is the maximum number of attempts before moving to the next space group.
 Type: integer
\end_layout

\begin_layout Enumerate
The number of threads can be set by using the environment variable 
\emph on
OMP_NUM_THREADS.
\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Enumerate
A file with all the generated structures in FHI-aims geometry format
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Generate a pool of random molecular crystals with VdW cutoff matrix
\end_layout

\begin_layout Standard

\emph on
generate_molecular_crystals_with_vdw_cutoff_matrix(filename, seedstate,
 vdw_matrix, num_structures, Z, volume_mean, volume_std, tol, max_attempts)
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Almost the same as the previous function.
 Uses a van der Waal cutoff matrix instead of sr.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Enumerate
All keywords same as before.
\end_layout

\begin_layout Enumerate

\emph on
seedstate 
\emph default
is the seed for random number generator.
 Type: int.
\end_layout

\begin_layout Enumerate
vdw_matrix is a numpy array.
 Type: 2D numpy array of type 
\begin_inset Quotes eld
\end_inset

float32
\begin_inset Quotes erd
\end_inset

 (single precision) and size 
\emph on
total_atoms 
\emph default
x
\emph on
 total_atoms
\emph default
\SpecialChar endofsentence

\end_layout

\begin_layout Subsection
Identification of compatible space groups given molecular symmetry
\end_layout

\begin_layout Standard

\emph on
find_allowed_positions_using_molecular_symmetry(point_group, Z, Z'')
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
This function finds the compatible space group positions using molecule's
 point group.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Enumerate

\emph on
point_group 
\emph default
is the point_group of the molecule.
 Eg: 
\begin_inset Quotes eld
\end_inset

mmm
\begin_inset Quotes erd
\end_inset

 for tetracene.
 Type: String.
\end_layout

\begin_layout Enumerate

\emph on
Z 
\emph default
is the number of molecules in the conventional cell.
 Type: integer
\end_layout

\begin_layout Enumerate

\emph on
Z'' 
\emph default
is the number of inequivalent molecules in the cell.
 
\emph on
Not implemented! Set any integer.
\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Enumerate
Compatible Wyckoff positions and space groups are printed.
\end_layout

\begin_layout Subsubsection*
Example
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename find_allowed_positions.png.png
	scale 40

\end_inset


\end_layout

\begin_layout Subsection
Molecule closeness check using specific radius proportion
\end_layout

\begin_layout Standard

\emph on
int c_check_structure(xtal, sr)
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
This function uses the built-in cgenarris structure checking function to
 see if the molecules are unphysically close.
 The treshold is controlled by specific radius proportion (sr).
 See the genarris paper for its definition.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Standard
First, you need to generate a SWIG object ( C structure called crystal internall
y) of type crystal by:
\end_layout

\begin_layout Enumerate

\emph on
sr 
\emph default
is the specific radius proportion.
\end_layout

\begin_layout Enumerate
create an object by 
\emph on
xtal = crystal().
\end_layout

\begin_layout Enumerate
Then assign values using the function
\end_layout

\begin_layout Itemize

\emph on
create_crystal_from_array(xtal, lattice_vector, X, Y, Z, atoms, Z, spg)
\end_layout

\begin_layout Itemize

\emph on
lattice vector 
\emph default
is a 3x3 numpy array which has the lattice vectors of the crystal in a row-wise
 form.
 Type: numpy 2D array.
\end_layout

\begin_layout Itemize

\emph on
X, Y, Z 
\emph default
are numpy arrays which the X, Y, and Z coordinates respectively.
 Type: numpy 1D array; length 
\emph on
total_atoms
\emph default
.
\end_layout

\begin_layout Itemize

\emph on
atoms 
\emph default
contain the atom type.
 This is a string which defines the element at each coordinate.
 If an atom is represented by a single character, add a trailing space.
 Eg: for Carbon it should be 
\begin_inset Quotes eld
\end_inset

C 
\begin_inset Quotes erd
\end_inset

 , for Bromine it should be 
\begin_inset Quotes eld
\end_inset

Br
\begin_inset Quotes erd
\end_inset

.
 Type: String of length 2 x
\emph on
 total_atoms
\end_layout

\begin_layout Itemize

\emph on
Z 
\emph default
is the number of molecules in the unit cell.
 Type: integer
\end_layout

\begin_layout Itemize

\emph on
spg 
\emph default
is the space group (Not used by structure checker!).
 Type : integer
\end_layout

\begin_layout Itemize
IMPORTANT: It is assumed that coordinates are specified in molecule blocks.
 i.e, first molecule is first N coordinates, second molecule is from N+1
 to 2N etc.
\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Standard
Returns 0 if the structure is unphysical, returns 1 if the structure passes
 the test.
\end_layout

\begin_layout Subsection
Molecule closeness check using vdW distance matrix
\end_layout

\begin_layout Standard

\emph on
int check_structure_with_vdw_matrix(xtal, vdw_matrix)
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
The vdW distance matrix defines the shortest distance between two atoms
 belonging to different molecules (which includes periodic images).
 The matrix should be symmetric and should be of size 
\emph on
total_atoms x total_atoms 
\emph default
where 
\emph on
total_atoms
\emph default
 is the number of atoms in a cell.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Enumerate
xtal is an object of type crystal.
 See the previous function for more details.
\end_layout

\begin_layout Enumerate
vdw_matrix is a numpy array.
 Type: 2D numpy array of type 
\begin_inset Quotes eld
\end_inset

float32
\begin_inset Quotes erd
\end_inset

 (single precision) and size 
\emph on
total_atoms 
\emph default
x
\emph on
 total_atoms
\emph default
\SpecialChar endofsentence

\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Standard
Returns 0 if the structure is unphysical, returns 1 if the structure passes
 the test.
\end_layout

\begin_layout Subsection
Number of space groups compatible with molecule's symmetry
\end_layout

\begin_layout Standard

\emph on
int num_compatible_spacegroups(Z, tolerance)
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Function to get information about the allowed space groups and Wyckoff positions
 for a given molecule.
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Enumerate

\emph on
Z
\emph default
 is the number of molecules in the unit cell.
 Type: int.
\end_layout

\begin_layout Enumerate

\emph on
tolerance 
\emph default
is the tolerance for compatibility check.
 Type: float.
\end_layout

\begin_layout Enumerate
Molecule geometry is read from 
\emph on
geometry.in
\emph default
 file from the present working directory.
\end_layout

\begin_layout Subsubsection*
Output
\end_layout

\begin_layout Enumerate
Returns the allowed space groups as an integer.
\end_layout

\begin_layout Enumerate
Prints the detailed output to stdout which includes Wyckoff positions available
 for given 
\emph on
Z .
\end_layout

\end_body
\end_document
