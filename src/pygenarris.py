# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pygenarris')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pygenarris')
    _pygenarris = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygenarris', [dirname(__file__)])
        except ImportError:
            import _pygenarris
            return _pygenarris
        try:
            _mod = imp.load_module('_pygenarris', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pygenarris = swig_import_helper()
    del swig_import_helper
else:
    import _pygenarris
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class crystal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, crystal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, crystal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lattice_vectors"] = _pygenarris.crystal_lattice_vectors_set
    __swig_getmethods__["lattice_vectors"] = _pygenarris.crystal_lattice_vectors_get
    if _newclass:
        lattice_vectors = _swig_property(_pygenarris.crystal_lattice_vectors_get, _pygenarris.crystal_lattice_vectors_set)
    __swig_setmethods__["Xcord"] = _pygenarris.crystal_Xcord_set
    __swig_getmethods__["Xcord"] = _pygenarris.crystal_Xcord_get
    if _newclass:
        Xcord = _swig_property(_pygenarris.crystal_Xcord_get, _pygenarris.crystal_Xcord_set)
    __swig_setmethods__["Ycord"] = _pygenarris.crystal_Ycord_set
    __swig_getmethods__["Ycord"] = _pygenarris.crystal_Ycord_get
    if _newclass:
        Ycord = _swig_property(_pygenarris.crystal_Ycord_get, _pygenarris.crystal_Ycord_set)
    __swig_setmethods__["Zcord"] = _pygenarris.crystal_Zcord_set
    __swig_getmethods__["Zcord"] = _pygenarris.crystal_Zcord_get
    if _newclass:
        Zcord = _swig_property(_pygenarris.crystal_Zcord_get, _pygenarris.crystal_Zcord_set)
    __swig_setmethods__["atoms"] = _pygenarris.crystal_atoms_set
    __swig_getmethods__["atoms"] = _pygenarris.crystal_atoms_get
    if _newclass:
        atoms = _swig_property(_pygenarris.crystal_atoms_get, _pygenarris.crystal_atoms_set)
    __swig_setmethods__["spg"] = _pygenarris.crystal_spg_set
    __swig_getmethods__["spg"] = _pygenarris.crystal_spg_get
    if _newclass:
        spg = _swig_property(_pygenarris.crystal_spg_get, _pygenarris.crystal_spg_set)
    __swig_setmethods__["wyckoff_position"] = _pygenarris.crystal_wyckoff_position_set
    __swig_getmethods__["wyckoff_position"] = _pygenarris.crystal_wyckoff_position_get
    if _newclass:
        wyckoff_position = _swig_property(_pygenarris.crystal_wyckoff_position_get, _pygenarris.crystal_wyckoff_position_set)
    __swig_setmethods__["num_atoms_in_molecule"] = _pygenarris.crystal_num_atoms_in_molecule_set
    __swig_getmethods__["num_atoms_in_molecule"] = _pygenarris.crystal_num_atoms_in_molecule_get
    if _newclass:
        num_atoms_in_molecule = _swig_property(_pygenarris.crystal_num_atoms_in_molecule_get, _pygenarris.crystal_num_atoms_in_molecule_set)
    __swig_setmethods__["Z"] = _pygenarris.crystal_Z_set
    __swig_getmethods__["Z"] = _pygenarris.crystal_Z_get
    if _newclass:
        Z = _swig_property(_pygenarris.crystal_Z_get, _pygenarris.crystal_Z_set)
    __swig_setmethods__["Zp"] = _pygenarris.crystal_Zp_set
    __swig_getmethods__["Zp"] = _pygenarris.crystal_Zp_get
    if _newclass:
        Zp = _swig_property(_pygenarris.crystal_Zp_get, _pygenarris.crystal_Zp_set)

    def __init__(self):
        this = _pygenarris.new_crystal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygenarris.delete_crystal
    __del__ = lambda self: None
crystal_swigregister = _pygenarris.crystal_swigregister
crystal_swigregister(crystal)


def find_allowed_positions_using_molecular_symmetry(mol_sym, Z, Zpp):
    return _pygenarris.find_allowed_positions_using_molecular_symmetry(mol_sym, Z, Zpp)
find_allowed_positions_using_molecular_symmetry = _pygenarris.find_allowed_positions_using_molecular_symmetry

def allocate_xtal(xtal, Z, N):
    return _pygenarris.allocate_xtal(xtal, Z, N)
allocate_xtal = _pygenarris.allocate_xtal

def create_crystal_from_array(xtal, lattice_vector, Xc, Yc, Zc, atoms, total_atoms, Z, spg):
    return _pygenarris.create_crystal_from_array(xtal, lattice_vector, Xc, Yc, Zc, atoms, total_atoms, Z, spg)
create_crystal_from_array = _pygenarris.create_crystal_from_array

def print_crystal(xtal):
    return _pygenarris.print_crystal(xtal)
print_crystal = _pygenarris.print_crystal

def free_xtal(xtal):
    return _pygenarris.free_xtal(xtal)
free_xtal = _pygenarris.free_xtal

def check_structure_with_vdw_matrix(random_crystal, vdw_matrix):
    return _pygenarris.check_structure_with_vdw_matrix(random_crystal, vdw_matrix)
check_structure_with_vdw_matrix = _pygenarris.check_structure_with_vdw_matrix

def num_compatible_spacegroups(Z, tolerance):
    return _pygenarris.num_compatible_spacegroups(Z, tolerance)
num_compatible_spacegroups = _pygenarris.num_compatible_spacegroups
# This file is compatible with both classic and new-style classes.


